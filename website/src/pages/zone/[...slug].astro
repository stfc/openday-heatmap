---
import { getEntry } from "astro:content";
import ZoneInfo from "../../layouts/ZoneInfo.astro";
import {
	adjectives,
	animals,
	colors,
	uniqueNamesGenerator,
} from "unique-names-generator";

////////////////////////////

// Check if a cookie has been set
// if so:
//  Continue (or make sure it has been set in the database)
// if not:
//	Create a unique random nickname
//  Send nickname to API and store UUID received in userID cookie

let userID = Astro.cookies.get("userID").value;
if (userID === undefined) {
	userID = await createUser();
	if (userID === undefined) return;
	Astro.cookies.set("userID", userID, {
		path: "/", // Need to make sure it's set to the root path
	});
}

// Don't like this :(
const nickname = await fetchName(userID);

// Returns UserID
async function createUser(): Promise<string> {
	const randomUserName = uniqueNamesGenerator({
		dictionaries: [colors, adjectives, animals],
		separator: "-",
	});

	const url = `${import.meta.env.HEATMAP_API_URL}/users`;
	console.log(url);

	const response = await fetch(url, {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify({ Nickname: randomUserName }),
	});

	const { UserID: id }: { UserID: string } = await response.json();
	return id;
}

async function fetchName(userID: string): Promise<string> {
	const response = await fetch(
		`${import.meta.env.HEATMAP_API_URL}/users/${userID}`
	);

	const { Nickname: nickname }: { Nickname: string } = await response.json();
	return nickname;
}

////////////////////////////

// Null is converted to 0
const qrID = Number(Astro.url.searchParams.get("qrcode"));
if (!isNaN(qrID) && qrID != 0) {
	await addTracking(qrID, userID);
}

async function addTracking(qrID: number, userID: string) {
	// TODO: Add error catching
	try {
		await fetch(`${import.meta.env.HEATMAP_API_URL}/tracking/add`, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({ UserID: userID, QRID: qrID }),
		});
	} catch (err) {
		console.error(err);
	}
}

////
const { slug } = Astro.params;
console.log(slug);
if (slug === undefined) {
	throw new Error("Slug is required");
}

const entry = await getEntry("zone", slug);
if (entry === undefined) {
	return Astro.redirect("/404");
}

const { Content } = await entry.render();
---

<ZoneInfo {...entry.data} userID={userID} qrID={qrID}>
	<Content />
	<p><em>Use this nickname to trace your steps: <b>{nickname}</b></em></p>
</ZoneInfo>
